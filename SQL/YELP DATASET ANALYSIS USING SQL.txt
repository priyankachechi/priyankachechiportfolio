Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000 
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 8090
vi. Checkin = 493
vii. Photo = 6493
viii. Tip = 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer: 

 SELECT id FROM user
 WHERE 
 id IS NULL OR
 name IS NULL OR 
 review_count IS NULL OR 
 yelping_since IS NULL OR 
 useful IS NULL OR 
 funny IS NULL OR 
 cool IS NULL OR 
 fans IS NULL OR 
 average_stars IS NULL OR 
 compliment_hot IS NULL OR 
 compliment_more IS NULL OR 
 compliment_profile IS NULL OR 
 compliment_cute IS NULL OR 
 compliment_list IS NULL OR 
 compliment_note IS NULL OR 
 compliment_plain IS NULL OR 
 compliment_cool IS NULL OR 
 compliment_funny IS NULL OR 
 compliment_writer IS NULL OR 
 compliment_photos IS NULL;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53	    avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT SUM(review_count) AS number_of_reviews 
	FROM business
        GROUP BY city
        ORDER BY number_of_reviews DESC;
	
	
	Copy and Paste the Result Below:
        +-------------------+
        | number_of_reviews |
        +-------------------+
        |             82854 |
        |             34503 |
        |             24113 |
        |             20614 |
        |             12523 |
        |             10871 |
        |             10504 |
        |              9798 |
        |              9448 |
        |              8112 |
        |              6875 |
        |              6380 |
        |              5593 |
        |              5265 |
        |              4406 |
        |              3814 |
        |              2792 |
        |              2624 |
        |              2438 |
        |              2352 |
        |              2029 |
        |              1849 |
        |              1520 |
        |              1465 |
        |              1155 |
        +-------------------+
        (Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

        SELECT stars AS star_ratings , SUM(review_count) AS count 
        FROM business
        WHERE city = 'Avon'
        GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
        +--------------+-------+
        | star_ratings | count |
        +--------------+-------+
        |          1.5 |    10 |
        |          2.5 |     6 |
        |          3.5 |    88 |
        |          4.0 |    21 |
        |          4.5 |    31 |
        |          5.0 |     3 |
        +--------------+-------+


ii. Beachwood

SQL code used to arrive at answer:

        SELECT stars AS star_ratings , SUM(review_count) AS count 
        FROM business
        WHERE city = 'Beachwood'
        GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
        +--------------+-------+
        | star_ratings | count |
        +--------------+-------+
        |          2.0 |     8 |
        |          2.5 |     3 |
        |          3.0 |    11 |
        |          3.5 |     6 |
        |          4.0 |    69 |
        |          4.5 |    17 |
        |          5.0 |    23 |
        +--------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT name, review_count 
	FROM user
        ORDER BY review_count DESC
        limit 3;
	
		
	Copy and Paste the Result Below:
	+--------+--------------+
        | name   | review_count |
        +--------+--------------+
        | Gerald |         2000 |
        | Sara   |         1629 |
        | Yuri   |         1339 |
        +--------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	No, posting more reviews does not correlate with more fans.

	As per my investigation of the data, posting more reviews is not correlated to having more fans. My approach to provide enough evidence to my claim includes two queries:
	1. Selecting the review count and fans and ordering the table in descending order with respect to review count.
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
	2. Selecting the review count and fans and ordering the table in descending order with respect to fans.
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+

	There were instances where a user named Amy had posted 609 reviews and had 503 fans while a user named Gerald posted 2000 reviews but only had 253 fans. 
	There is a general trend of users who have posted, let's say, 100 reviews have larger number of fans than users who haven't posted any or fewer reviews. 
	But number of reviews are in no way directly proportional to the number of fans.
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: YES. There are 232 reviews with "hate" and 1780 reviews with "love"

	
	SQL code used to arrive at answer:

         SELECT text FROM review
         WHERE text LIKE '%hate%';
     
         SELECT text FROM review
         WHERE text LIKE '%love%';



	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name, fans 
	FROM user
        ORDER By fans DESC
        limit 10;
	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the business with 2-3 stars rating(category A) had much more working hours whereas the business with 4-5 stars rating(category B) had much less working hours.


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, business with less stars (2-3) have much less reviews whereas the business with more stars (4-5) have more reviews
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Business with 2-3 stars rating were located in the area with Postal code 85048 had lower ratings whereas the ones with 4-5 stars with Postal code 85028 had higher ratings. The former location has much more population whereas the latter has lower population. 

SQL code used for analysis:
              SELECT h.hours, b.name , b.stars , b.review_count, b.postal_code,
                           CASE
				  WHEN hours LIKE "%Monday%" THEN 1
				  WHEN hours LIKE "%Tuesday%" THEN 2
				  WHEN hours LIKE "%Wednesday%" THEN 3
				  WHEN hours LIKE "%Thursday%" THEN 4
				  WHEN hours LIKE "%Friday%" THEN 5
				  WHEN hours LIKE "%Saturday%" THEN 6
				  WHEN hours LIKE "%Sunday%" THEN 7
			   END AS orderofhours,

                           CASE
			 WHEN B.stars BETWEEN 2 AND 3 THEN 'Category A'--2-3 stars rating
		         WHEN B.stars BETWEEN 4 AND 5 THEN 'Category B'--4-5 stars rating
			   END AS ratings
              FROM hours h
              INNER JOIN business b ON b.id = h.business_id
              INNER JOIN category c ON c.business_id = b.id
              WHERE b.city = 'Phoenix' AND c.category = 'Food'
              GROUP BY stars,orderofhours
              ORDER BY orderofhours,ratings ASC;


		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

 Difference in average stars
 CLOSED = 3.52039473684
 OPEN = 3.67900943396 
         
         
ii. Difference 2:

 Difference in number of reviews
 CLOSED = 1520
 OPEN = 8480
         
         
         
SQL code used for analysis:

     SELECT name, stars, review_count, postal_code,is_open,AVG(stars),COUNT(review_count),
        CASE
             WHEN is_open == 1 THEN 'open'
             WHEN is_open != 1 THEN 'closed'
        END AS status
    
     FROM business
     GROUP BY is_open;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Predicting the rating awarded to a business
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

For the stakeholders, I will try to take into account various factors such as location, review count, no of hours the business remains open, postal code, category, state, city and neighbourhood to predict what kind of rating maybe awarded to the businesses yet to be rated. 

This data can also be used to predict yearly ratings based on the ratings data available for previous years (If only, this data can be collected) along with the aforementioned factors. 
                           
                  
iii. Output of your finished dataset:
+-------+-----------+-------------+---------+--------------+---------------+-----------------+--------------+----------------+--------------+
| state | city      | postal_code | reviews | Monday_hours | Tuesday_hours | Wednesday_hours | Friday_hours | Saturday_hours | Sunday_hours |
+-------+-----------+-------------+---------+--------------+---------------+-----------------+--------------+----------------+--------------+
| ON    | Markham   | L3R 3P9     |     175 | 12:00-23:00  | 12:00-23:00   | 12:00-23:00     | 12:00-23:00  | 12:00-23:00    | 12:00-23:00  |
| ON    | Markham   | L3R 3P9     |     175 | 12:00-23:00  | 12:00-23:00   | 12:00-23:00     | 12:00-23:00  | 12:00-23:00    | 12:00-23:00  |
| NC    | Charlotte | 28217       |      48 | 9:00-19:00   | 9:00-19:00    | 9:00-19:00      | 9:00-19:00   | 9:00-17:00     | None         |
| NC    | Charlotte | 28217       |      48 | 9:00-19:00   | 9:00-19:00    | 9:00-19:00      | 9:00-19:00   | 9:00-17:00     | None         |
| NC    | Charlotte | 28217       |      48 | 9:00-19:00   | 9:00-19:00    | 9:00-19:00      | 9:00-19:00   | 9:00-17:00     | None         |
| NC    | Charlotte | 28217       |      48 | 9:00-19:00   | 9:00-19:00    | 9:00-19:00      | 9:00-19:00   | 9:00-17:00     | None         |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| AZ    | Mesa      | 85204       |     903 | 11:00-21:00  | 11:00-21:00   | 11:00-21:00     | 11:00-22:00  | 11:00-22:00    | 11:00-21:00  |
| NV    | Las Vegas | 89121       |      66 | 10:00-16:00  | 10:00-19:00   | 10:00-16:00     | 10:00-16:00  | 10:00-16:00    | None         |
| NV    | Las Vegas | 89121       |      66 | 10:00-16:00  | 10:00-19:00   | 10:00-16:00     | 10:00-16:00  | 10:00-16:00    | None         |
| NV    | Las Vegas | 89102       |      42 | 7:00-17:00   | 7:00-17:00    | 7:00-17:00      | 7:00-17:00   | 8:00-12:00     | None         |
| NV    | Las Vegas | 89102       |      42 | 7:00-17:00   | 7:00-17:00    | 7:00-17:00      | 7:00-17:00   | 8:00-12:00     | None         |
| NV    | Las Vegas | 89102       |      42 | 7:00-17:00   | 7:00-17:00    | 7:00-17:00      | 7:00-17:00   | 8:00-12:00     | None         |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
| OH    | Cleveland | 44113       |    3615 | 7:00-16:00   | None          | 7:00-16:00      | 7:00-18:00   | 7:00-18:00     | 10:00-16:00  |
+-------+-----------+-------------+---------+--------------+---------------+-----------------+--------------+----------------+--------------+


         
         
iv. Provide the SQL code you used to create your final dataset:

   SELECT b.state, b.city, b.postal_code, SUM(b.review_count) AS reviews,
        MAX(CASE 
            WHEN h.hours LIKE "%monday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Monday_hours,
        MAX(CASE 
            WHEN h.hours LIKE "%tuesday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Tuesday_hours,
        MAX(CASE 
            WHEN h.hours LIKE "%wednesday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Wednesday_hours,
        MAX(CASE 
            WHEN h.hours LIKE "%friday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Friday_hours,
        MAX(CASE 
            WHEN h.hours LIKE "%saturday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Saturday_hours,
        MAX(CASE 
            WHEN h.hours LIKE "%sunday%" THEN TRIM(h.hours,'%MondayTuesWednesThursFriSatSun|%')
            END) AS Sunday_hours

   FROM business b 
   INNER JOIN hours h ON b.id = h.business_id
   INNER JOIN category c ON b.id = c.business_id
   GROUP BY b.id,c.category;
